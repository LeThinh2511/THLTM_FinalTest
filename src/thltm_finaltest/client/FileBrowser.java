/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package thltm_finaltest.client;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import thltm_finaltest.Define;
import thltm_finaltest.model.MessageType;
import thltm_finaltest.model.Room;
import thltm_finaltest.model.Teacher;

/**
 *
 * @author thinhle
 */
public class FileBrowser extends javax.swing.JFrame {

    XSSFWorkbook teacherListWorkbook;
    XSSFWorkbook roomListWorkbook;
    ArrayList<Teacher> teachers = new ArrayList<>();
    ArrayList<Room> rooms = new ArrayList<>();
    Socket socket = null;
    ObjectOutputStream sender = null;
    ObjectInputStream receiver = null;
    String resultFilePath = null;

    /**
     * Creates new form FileBrowser
     */
    public FileBrowser() {
        initComponents();
    }

    public void setConnection(Socket socket, ObjectOutputStream sender, ObjectInputStream receiver) {
        this.socket = socket;
        this.sender = sender;
        this.receiver = receiver;
    }

    public void setMessage(String message) {
        this.messageLabel.setText(message);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messageLabel = new javax.swing.JLabel();
        teacherListFilePathTextField = new javax.swing.JTextField();
        browseTeacherListFileButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        roomListFilePathTextField = new javax.swing.JTextField();
        browseRoomListFileButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        resultFilePathTextField = new javax.swing.JTextField();
        browseResultPathButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        resultFileNameTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Choose File");
        setResizable(false);

        messageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        messageLabel.setText("Choose File");

        teacherListFilePathTextField.setEditable(false);

        browseTeacherListFileButton.setText("Browse...");
        browseTeacherListFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseTeacherListFileButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Teacher List:");

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Room List:");

        roomListFilePathTextField.setEditable(false);

        browseRoomListFileButton.setText("Browse...");
        browseRoomListFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseRoomListFileButtonActionPerformed(evt);
            }
        });

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Result File Path:");

        resultFilePathTextField.setEditable(false);

        browseResultPathButton.setText("Browse...");
        browseResultPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseResultPathButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Result File Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(351, 351, 351)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(closeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resultFileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(resultFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(browseResultPathButton))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(roomListFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(browseRoomListFileButton))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addGap(30, 30, 30)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(messageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(teacherListFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(browseTeacherListFileButton))))))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(125, Short.MAX_VALUE)
                .addComponent(messageLabel)
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(teacherListFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseTeacherListFileButton)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomListFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseRoomListFileButton)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resultFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseResultPathButton)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resultFileNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(sendButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton)
                .addGap(49, 49, 49))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void browseTeacherListFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseTeacherListFileButtonActionPerformed
        FileInputStream fileInputStream = null;
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.showOpenDialog(null);
            File file = fileChooser.getSelectedFile();
            String filePath = file.getAbsolutePath();
            this.teacherListFilePathTextField.setText(filePath);
            fileInputStream = new FileInputStream(file);
            teacherListWorkbook = new XSSFWorkbook(fileInputStream);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FileBrowser.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FileBrowser.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fileInputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(FileBrowser.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_browseTeacherListFileButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        try {
            if (this.roomListWorkbook == null || this.teacherListWorkbook == null) {
                this.messageLabel.setForeground(Color.red);
                this.messageLabel.setText("Please choose Files!");
                return;
            } else if (this.resultFileNameTextField.getText().equals("") || this.resultFilePathTextField.getText().equals("")) {
                this.messageLabel.setForeground(Color.red);
                this.messageLabel.setText("Result file path invalid!");
                return;
            }
            this.messageLabel.setForeground(Color.BLUE);
            this.messageLabel.setText("Processing...");
            XSSFSheet sheet = teacherListWorkbook.getSheetAt(0);
            int numOfRows = sheet.getPhysicalNumberOfRows();
            for (int i = Define.firstRowIndexTeacherList; i < numOfRows; i++) {
                Row row = sheet.getRow(i);
                String name = row.getCell(Define.teacherNameRowIndex).getStringCellValue();
                String code = row.getCell(Define.teacherCodeRowIndex).getStringCellValue();
                Date birthday = row.getCell(Define.teacherBirthdayRowIndex).getDateCellValue();
                String school = row.getCell(Define.teacherSchoolRowIndex).getStringCellValue();
                Teacher teacher = new Teacher(name, birthday, school, code);
                this.teachers.add(teacher);
            }

            sheet = roomListWorkbook.getSheetAt(0);
            numOfRows = sheet.getPhysicalNumberOfRows();
            for (int i = Define.firstRowIndexRoomList; i < numOfRows; i++) {
                Row row = sheet.getRow(i);
                String name = row.getCell(Define.roomNameRowIndex).getStringCellValue();
                Room room = new Room(name);
                this.rooms.add(room);
            }
            this.sendMessageToServer(MessageType.roomList, rooms);
            this.sendMessageToServer(MessageType.teacherList, teachers);
            System.out.println(rooms.size());
            System.out.println(teachers.size());
            this.rooms = new ArrayList<>();
            this.teachers = new ArrayList<>();
            System.out.println("Check");
        } catch (Exception e) {
            System.out.println(e.getLocalizedMessage());
            this.messageLabel.setText("Can not read data from files: Invalid Format");
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void browseRoomListFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseRoomListFileButtonActionPerformed
        FileInputStream fileInputStream = null;
        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.showOpenDialog(null);
            File file = fileChooser.getSelectedFile();
            String filePath = file.getAbsolutePath();
            this.roomListFilePathTextField.setText(filePath);
            fileInputStream = new FileInputStream(file);
            roomListWorkbook = new XSSFWorkbook(fileInputStream);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FileBrowser.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FileBrowser.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                fileInputStream.close();
            } catch (IOException ex) {
                Logger.getLogger(FileBrowser.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_browseRoomListFileButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.sendMessageToServer(MessageType.isFinished, true);
        System.exit(0);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void browseResultPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseResultPathButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            this.resultFilePath = fileChooser.getSelectedFile().getAbsolutePath();
            this.resultFilePathTextField.setText(resultFilePath);
            System.out.println("Result file path: " + this.resultFilePath);
        } else {
            System.out.println("No Selection ");
        }
    }//GEN-LAST:event_browseResultPathButtonActionPerformed

    public void writeFile(ArrayList<Room> rooms) {
        System.out.println("writing data");
        for (Room room : rooms) {
            System.out.println("Room: " + room.getName() + " Teacher 1: " + room.getFirstTeacher().getCode() + " Teacher 2: " + room.getSecondTeacher().getCode());
        }
        String fileName = this.resultFilePath + "/" + this.resultFileNameTextField.getText() + ".xlsx";
        System.out.println(fileName);
        try {
            XSSFWorkbook resultWorkbook = new XSSFWorkbook();
            XSSFSheet sheet = resultWorkbook.createSheet("Result");
            XSSFRow rowHead = sheet.createRow((short) 0);
            rowHead.createCell(0).setCellValue("STT");
            rowHead.createCell(1).setCellValue("Phòng");
            rowHead.createCell(2).setCellValue("CBCT 1");
            rowHead.createCell(3).setCellValue("CBCT 2");

            for (int i = 0; i < rooms.size(); i++) {
                XSSFRow row = sheet.createRow((short) (i + 1));
                Room room = rooms.get(i);
                row.createCell(0).setCellValue(i);
                row.createCell(1).setCellValue(room.getName());
                row.createCell(2).setCellValue(room.getFirstTeacher().getCode());
                row.createCell(3).setCellValue(room.getSecondTeacher().getCode());
            }
            
            FileOutputStream fileOut = new FileOutputStream(fileName);
            resultWorkbook.write(fileOut);
            fileOut.close();
            resultWorkbook.close();
            System.out.println("Your excel file has been generated!");
            this.messageLabel.setText("Your excel file has been generated!");
        } catch (IOException ex) {
            Logger.getLogger(FileBrowser.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public <T> void sendMessageToServer(MessageType type, T data) {
        try {
            sender.writeObject(type);
            sender.writeObject(data);
        } catch (Exception e) {
            System.out.print("Send data Error: Client");
            System.out.println(e.toString());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FileBrowser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FileBrowser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FileBrowser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FileBrowser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FileBrowser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseResultPathButton;
    private javax.swing.JButton browseRoomListFileButton;
    private javax.swing.JButton browseTeacherListFileButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel messageLabel;
    private javax.swing.JTextField resultFileNameTextField;
    private javax.swing.JTextField resultFilePathTextField;
    private javax.swing.JTextField roomListFilePathTextField;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextField teacherListFilePathTextField;
    // End of variables declaration//GEN-END:variables
}
